version: "3.9"

services:
  kafka:
    image: confluentinc/confluent-local:8.0.0
    container_name: kafka
    hostname: kafka
    ports:
      - "9092:9092"        # external listener
      - "29092:29092"      # internal listener (for containers)
    environment:
      CLUSTER_ID: "mkW2eY1zQk-x1a2b3c4d5e"    # any valid base64 uuid; for local dev
      KAFKA_CFG_PROCESS_ROLES: "broker,controller"
      KAFKA_CFG_NODE_ID: 1
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: "1@kafka:29093"
      KAFKA_CFG_LISTENERS: "PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:29093,INTERNAL://0.0.0.0:29092"
      KAFKA_CFG_ADVERTISED_LISTENERS: "PLAINTEXT://localhost:9092,INTERNAL://kafka:29092"
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_CFG_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    healthcheck:
      test: ["CMD", "bash", "-lc", "kafka-topics --bootstrap-server localhost:9092 --list >/dev/null 2>&1"]
      start_period: 10s
      interval: 5s
      timeout: 5s
      retries: 20

  schema-registry:
    image: confluentinc/cp-schema-registry:8.0.0
    container_name: schema-registry
    hostname: schema-registry
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: "kafka:29092"

  connect:
    build:
      context: ./connect
      dockerfile: Dockerfile
      args:
        CP_VERSION: "8.0.0"
    container_name: connect
    hostname: connect
    depends_on:
      kafka:
        condition: service_healthy
      schema-registry:
        condition: service_started
    ports:
      - "8083:8083"   # Kafka Connect REST API
    environment:
      CONNECT_BOOTSTRAP_SERVERS: "kafka:29092"
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: "connect-cluster"
      CONNECT_CONFIG_STORAGE_TOPIC: "_connect-configs"
      CONNECT_OFFSET_STORAGE_TOPIC: "_connect-offsets"
      CONNECT_STATUS_STORAGE_TOPIC: "_connect-status"
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER: "org.apache.kafka.connect.storage.StringConverter"
      CONNECT_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_VALUE_CONVERTER_SCHEMAS_ENABLE: "false"
      CONNECT_KEY_CONVERTER_SCHEMAS_ENABLE: "false"
      CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components"
      CONNECT_REST_ADVERTISED_HOST_NAME: "connect"
      CONNECT_LOG4J_LOGGERS: "org.apache.zookeeper=ERROR,org.I0Itec.zkclient=ERROR,org.reflections=ERROR"
      CONNECT_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
    healthcheck:
      test: ["CMD", "bash", "-lc", "curl -fsS http://localhost:8083/connectors >/dev/null"]
      interval: 5s
      timeout: 5s
      retries: 20

  dev:
    build:
      context: ./.devcontainer
      dockerfile: Dockerfile
    container_name: dev
    hostname: dev
    depends_on:
      kafka:
        condition: service_healthy
      connect:
        condition: service_started
    volumes:
      - .:/workspaces/kafka-testdata-spark
    command: sleep infinity
    # Expose Jupyter if you want to 'jupyter lab' inside the dev container
    ports:
      - "8888:8888"